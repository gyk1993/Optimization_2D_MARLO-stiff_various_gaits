function [obj] = configureOptVariables(obj)            
    % configureOptVariables - register optimization variables
    %
    % Copyright 2014-2015 Texas A&M University AMBER Lab
    % Author: Ayonga Hereid <ayonga@tamu.edu>
    
    startingIndex = 0;
    for i=1:obj.nDomain
        
        domain = obj.domains{i};
        %% register optimization variables
        % time duration (t)
        switch obj.options.IntegrationScheme
            case 'Hermite-Simpson'
                nodeList = 1:1:domain.nNode;
                domain = addVariable(domain,'t',...
                    1,nodeList,domain.minTimeInterval,...
                    domain.maxTimeInterval);
            case 'Trapezoidal'
                nodeList = 1:1:domain.nNode;
                domain = addVariable(domain,'t',...
                    1,nodeList,domain.minTimeInterval,...
                    domain.maxTimeInterval);                   
            otherwise
                error('Undefined integration scheme.');
        end


        % joint displacement (q)
        domain = addVariable(domain,'q',...
            domain.nDof,1:(domain.nNode),...
            domain.minJointAngles,...
            domain.maxJointAngles);

        % joint velocity (dq)
        domain = addVariable(domain,'dq',...
            domain.nDof,1:(domain.nNode),...
            domain.minJointVelocities,...
            domain.maxJointVelocities);
        
        % joint acceleration (ddq)
        domain = addVariable(domain,'ddq',...
            domain.nDof,1:(domain.nNode),...
            domain.minJointAccels,...
            domain.maxJointAccels);

        % actuator torque (u)
        domain = addVariable(domain,'u',...
            domain.nAct,1:(domain.nNode),...
            domain.minTorques,...
            domain.maxTorques);

        % constraint force (Fe)
        domain = addVariable(domain,'Fe',...
            domain.nHolConstr,1:(domain.nNode),...
            domain.minConstrForces,...
            domain.maxConstrForces);

%         if ~obj.options.OpenLoopController
%----------------------------------------------------------
%             % desired velocity (v)
%             domain = addVariable(domain,'v',...
%                 domain.nParamRD1,1:(domain.nNode),...
%                 domain.minParamRD1,...
%                 domain.maxParamRD1);
%----------------------------------------------------------
        % desired function parameters (p)
        domain = addVariable(domain,'p',...
            domain.nParamPhaseVar,1:(domain.nNode),...
            domain.minParamPhaseVar,...
            domain.maxParamPhaseVar);

        % desired function parameters (a)
        domain = addVariable(domain,'a',...
            domain.nParamRD2,1:(domain.nNode),...
            domain.minParamRD2,...
            domain.maxParamRD2);
        
        % desired holonomic constraints (h)
        % h(1): desired stance foot x
        % h(2): desired stance foot y
        % h(3): desired stance foot z
        domain = addVariable(domain,'h',...
            3,1:domain.nNode,...
            [-10;-10;-10],...
            [10;10;10]);

        % Impact force (Fimp)
        if domain.hasImpact
            domain = addVariable(domain,'Fimp',...
                domain.nImpConstr,domain.nNode,domain.minImpactForces,...
                domain.maxImpactForces);
        end
        
        % Add final q to separate the impact and the reset maps
        domain = addVariable(domain,'qend',...
            domain.nDof,domain.nNode,...
            domain.minJointAngles,...
            domain.maxJointAngles);
        
        % Add final dq to separate the impact and the reset maps
        domain = addVariable(domain,'dqend',...
            domain.nDof,domain.nNode,...
            domain.minJointVelocities,...
            domain.maxJointVelocities);

        % v: filtered velocity
        % v(1): x velocity
        % v(2): y velocity
        % v(3): x acceleration
        % v(4): y acceleration
        domain = addVariable(domain,'v',...
            4,1:domain.nNode,...
            [-100;-100;-100;-100],...
            [100;100;100;100]);

        % generate variables indices
        domain = genVarIndices(domain,startingIndex);

        % update starting index of next domain
        startingIndex = startingIndex + domain.nOptVars;
        
        obj.domains{i} = domain;
    end

    obj.nOptVar = startingIndex;

end