function [Y,Xf,Af] = neuralnetwork_2(X,~,~)
%NEURALNETWORK_2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-May-2017 13:44:19.
% 
% [Y] = neuralnetwork_2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.59218685178728;
x1_step1.gain = 0.622524189943261;
x1_step1.ymin = -1;

% Layer 1
b1 = [15.978405650346943;-1.2452112971822424;-1.214644436842871;83.958734617457978;-2.1182585905013243;2.1044487509764056];
IW1_1 = [-18.499666177636769;1.9388255051676357;1.8947672430545366;243.08796239249207;-3.6938220787157623;3.6576209898844363];

% Layer 2
b2 = [0.0050053110568493361;-0.096275209839764786;-0.091811248452635288;0.45867745499937568;0.92130500765551349;0.69636600124433523];
LW2_1 = [0.027534076938259756 -6.8733879255351704 6.2898517868836885 -0.024982913819883133 -39.645542189730755 -40.193280636241262;-0.013689225609022377 2.7442938279046731 -3.5173149774620516 -0.037816657825318914 -27.541750974496338 -27.990463398076908;-0.077803436324378819 -1.7737236768232523 0.96560437414340528 -0.055693388481182625 -25.085380639140116 -25.51166862012612;-0.42305708878816267 -77.454999405715583 77.207258800271617 -0.066851328678860192 -6.7488464283659404 -7.4251945100220471;-0.48360496446335344 -167.5884885864229 169.20307117385522 0.085318428841885979 26.403307563798776 25.735402306748057;0.053757672808223966 -96.294963768936341 98.130735554619861 0.16991606930472092 23.990429363012851 23.740525025786141];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [6.31190217227972;4.27596122520961;4.03246257325411;6.26435090896917;9.61677461565796;4.76088039834125];
y1_step1.xoffset = [2.95186766107147;2.87167378354372;2.84632554490191;2.91195081539974;3.00708479844761;2.90675853609004];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
