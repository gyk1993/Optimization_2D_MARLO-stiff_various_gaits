function [Y,Xf,Af] = neuralnetwork_2(X,~,~)
%NEURALNETWORK_2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-May-2017 14:26:46.
% 
% [Y] = neuralnetwork_2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.2;
x1_step1.gain = 0.833333333333333;
x1_step1.ymin = -1;

% Layer 1
b1 = [-14.957488199738437;-2.4450445498547158;0.0723141801063171;-8.1986466142753649;7.2407171465128375;2.6128853983480655];
IW1_1 = [17.483758922282121;3.6491611454205208;-0.61245103110146748;-18.473963886246466;16.013958062097608;4.3755665421872054];

% Layer 2
b2 = [-0.056815677761755654;-0.070119711648558125;-0.07353741879620275;0.15535551177045059;0.09242074741419283;0.1168272870467139];
LW2_1 = [-0.03597684768273611 -0.33717905918236479 0.68797496573482786 1.3042119505105527 1.5626009703673669 -0.54762273032541708;0.0040022248992194337 -0.25076644537453746 1.0738540111356483 0.82612509605741746 0.98574836937779198 -0.35789656927864094;0.069132823445221245 -0.34958914577262395 0.95358037039583377 1.5304869769322407 1.727785700659402 -0.42051217164767785;0.44328962597360611 -1.5114724809657469 -1.756097091789786 3.7283281019268912 4.0643205659805597 -1.2190530507796318;0.52745420924684705 -2.3329709975604143 -6.2395209598296422 2.3536663299285787 2.6092605667612485 -1.6756315738455074;-0.024446971743566949 -0.94577197578435857 -4.5674975263300128 -1.2676491948240862 -1.2746155290566195 -0.73823718247812009];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [6.46255071264034;4.28860382753767;3.99534055481759;6.27210520646099;9.47937964830586;4.68545594695981];
y1_step1.xoffset = [2.95195349241899;2.87176115348578;2.84643605010836;2.91238539527049;3.00414363112506;2.90000544988226];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
