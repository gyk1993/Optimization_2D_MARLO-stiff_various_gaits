function [Y,Xf,Af] = neuralnetwork_3(X,~,~)
%NEURALNETWORK_3 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-May-2017 14:26:47.
% 
% [Y] = neuralnetwork_3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.2;
x1_step1.gain = 0.833333333333333;
x1_step1.ymin = -1;

% Layer 1
b1 = [3.7921554658248624;0.74962354906539808;0.74584348072453455;1.9062390034006398;9.5877420212219153;-4.0097583081665631];
IW1_1 = [-4.127471579014089;-1.6027321670295016;-1.8940394701291958;1.7077559064985175;17.478879528586553;-4.0378977993366512];

% Layer 2
b2 = [-5.0380991683597713;2.9474624033660897;-3.441259066557905;0.40843709521187843;6.257533128938829;-5.2707665632280367];
LW2_1 = [-0.52882690788636366 0.96614902149119086 1.2833744748891542 11.480959939935024 -0.15979853758868612 5.7251729684478025;-1.2337673839795129 4.206910502399138 -4.2026499209481747 -3.5466729852031951 0.072709397725665231 -0.59419008765603176;-6.9475202702969883 54.810011872921926 -44.592654725920617 9.8239919135710689 0.33210999810101671 6.4664361280474987;0.94056680131984394 -28.267295707909405 24.895270615750498 7.6998407575079559 -0.96649103712293072 5.2247103846044416;1.5035781945417168 -22.352043595503268 17.522981401812949 -8.6084984345027795 0.38970988928452122 -2.2257315411014669;-5.5690080364444325 73.513479073424065 -61.889946907839864 1.7187362352006841 1.2562346612856599 -0.0063383401303267724];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [93.2507158661118;33.5916956584235;32.2492465141452;38.7876860351672;22.7319168454523;31.6561375194933];
y1_step1.xoffset = [0.872664615928993;0.850437249284496;0.867367169570979;0.851819792555435;0.848042237056799;0.873248416803639];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
