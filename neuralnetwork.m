function [Y,Xf,Af] = neuralnetwork(X,~,~)
%NEURALNETWORK neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-May-2017 12:26:26.
% 
% [Y] = neuralnetwork(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.2;
x1_step1.gain = 0.833333333333333;
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.7876362486369981;2.5079986564670071;0.066955909029294852;2.4174466881899797;6.2905474790713303];
IW1_1 = [8.7228968767153496;-5.6788580126190267;4.3392437460013031;4.4996966160075651;6.8010988103752092];

% Layer 2
b2 = [2.2788829909658865;1.897466251147806;0.41932375846770359;0.86025377717724949;2.029469656381413];
LW2_1 = [-0.46648966846187656 0.40647115030376268 -2.2931952388308057 -0.17818649405931303 -0.71537529353432239;1.8029277443454301 -0.50066964573841488 0.88475723802505257 -1.4111264280866291 -0.025948254006597019;0.51614250122901406 -1.5606628171221897 -0.10557832133094613 -1.7304197840822435 -0.21452184935801169;2.5386381440548229 0.47233014854478128 -2.0305979915714167 -0.19594876003463041 -0.77584979121344788;-1.2077071156768135 0.28226560441336779 -0.43596774695572649 -1.043256539988022 1.533252617974818];

% Layer 3
b3 = [-0.24345872561370804;-0.15782141996094468;0.92849643190941356;-0.58871540009373946;-0.2949179274494087;-0.18689015828334038];
LW3_2 = [-0.38607443747714038 -1.6502898877754524 0.64305263055041328 -0.59809267486494677 0.072850931537596905;0.035777714262929583 -0.2355931018248173 -0.89308162247558665 -0.35925929401637102 -0.33370406535463032;-1.4016280906018381 -1.181372397584882 0.10623624343644389 1.650340850131647 0.049228107722911973;0.35891004140423793 -1.6604479769944445 2.3668580267816108 -1.3665597384739636 0.70301241647391177;1.4042927433952848 1.325292565910946 -0.37729147548585829 -1.5744078695380976 -0.80443373906810312;1.3465827340248886 -0.15335138076010479 1.4305341667736691 -1.7883083151261143 -0.95085526050438807];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [93.282266306785;19.2269766319022;15.8745941364607;17.4727472739864;20.0409035607327;97.2378103837189];
y1_step1.xoffset = [0.872674651644303;0.834212443187748;1.23000758668333;1.44574716642483;1.13500519730331;0.872662579308983];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(3,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
