function [Y,Xf,Af] = neuralnetwork_4(X,~,~)
%NEURALNETWORK_4 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-May-2017 14:26:48.
% 
% [Y] = neuralnetwork_4(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.2;
x1_step1.gain = 0.833333333333333;
x1_step1.ymin = -1;

% Layer 1
b1 = [-9.5731650728934454;2.1926756960277478;1.4150945604177723;0.77128103733439557;-3.2065604450009304;3.4464469223308059];
IW1_1 = [11.377221076729779;-2.737117591330672;-1.2581329182341063;3.3182720014292997;-4.137275643858608;4.3023135327272888];

% Layer 2
b2 = [0.22680420970943438;-0.60332650721433134;12.203389671617243;-7.8064673214887312;-11.546053011175189;-13.754657939982327];
LW2_1 = [0.83911719683556041 4.6286289745901028 -4.253853865367863 -0.041452142772037896 -7.1550594840018871 -6.3043858974624447;0.026023914409895463 2.3298779906489409 -1.9316808783421529 0.028186464848380301 -1.1971617550493336 -0.1670521993540888;1.2239249259131582 12.051814870171333 -24.645431461378553 -2.5367152411132738 -7.216687588314219 -7.38346884131282;0.52882284709622851 -4.8459328268095359 14.66742488063594 1.5944749055080016 -2.915550156649521 -2.9028605820157121;-1.150821379417879 -11.545824094059459 23.400024230155559 2.3975636759771066 6.5752844109298847 6.7937631741051625;-0.039620064682104585 -11.336707117940851 26.749896897924252 2.8736247318040182 5.1459304634337428 4.9440430152934773];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [93.282266306785;19.2269766319022;15.8745941364607;17.4727472739864;20.0409035607327;97.2378103837189];
y1_step1.xoffset = [0.872674651644303;0.834212443187748;1.23000758668333;1.44574716642483;1.13500519730331;0.872662579308983];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
