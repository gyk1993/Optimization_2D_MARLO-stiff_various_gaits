function [Y,Xf,Af] = neuralnetwork_4(X,~,~)
%NEURALNETWORK_4 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-May-2017 13:44:22.
% 
% [Y] = neuralnetwork_4(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.59218685178728;
x1_step1.gain = 0.622524189943261;
x1_step1.ymin = -1;

% Layer 1
b1 = [5.3797728807982299;-2.563071006321799;-2.6816226972364334;-0.58075567882137513;0.59159957032727928;1.9691180262788981];
IW1_1 = [-5.5969962204054839;2.1178249305923207;1.5667876393473028;-1.6716069966000489;1.487349841409664;2.2120943515811851];

% Layer 2
b2 = [-131.41424515060024;35.18476118209999;-150.79777114110951;-209.74667676223487;192.47363129472757;197.67321952396568];
LW2_1 = [-3.9097147806694044 38.133548294852673 -174.94374668751607 48.85490837099789 60.04033070209406 -5.9069095540126932;-1.4556975713877143 -24.782742729366056 59.547102781140566 -7.7031358837603046 -9.5466212304823976 2.9145339215212434;-9.1366454790096121 27.589542645310733 -191.26380813247579 184.6776713505713 217.6530805614984 -23.168024099731877;2.4650764953014868 101.09111428884148 -310.57503473061769 -21.266561749022703 -20.413863435838927 0.25936696630274669;8.4438161365408497 -46.941521713065079 252.17106308789329 -192.9719029906089 -228.01400252186397 24.577741127070848;6.8452622724524064 -49.521589631498664 258.55735971736021 -233.75811527621002 -274.93922076849549 28.301612717163277];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [92.7542107531417;18.9651561058611;16.124856678923;17.499606500282;20.023668556521;97.3162149522434];
y1_step1.xoffset = [0.872684638931988;0.832791802025336;1.22997928118973;1.44594914856624;1.13488897666302;0.872662602477179];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
